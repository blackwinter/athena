var search_data = {"index":{"searchIndex":["athena","cli","formats","base","configerror","dbm","directionmismatcherror","duplicateformatdefinitionerror","ferret","formaterror","formatnotfounderror","illegalrecordelementerror","lingo","keyvalue","multikey","multivalue","singleword","wordclass","mysql","midos","mysql","norecordelementerror","pgsql","pgsql","sisis","xml","basespec","elementspec","flat","recordspec","subelementspec","record","norecorderror","version","nuggets","[]()","[]()","add_record()","build_config()","builder()","check_args()","close()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","defaults()","deferred?()","deferred?()","define_spec()","directions()","done()","done()","empty()","fill()","find()","format()","format_name()","has_direction?()","init()","init()","init_in()","init_in()","init_in()","init_in()","init_in()","init_in()","init_out()","input_formats()","listener()","merge_config()","merge_specs()","new()","new()","new()","new()","new()","new()","new()","opts()","output_formats()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","print_formats()","raw?()","raw?()","records()","register()","register_all()","register_format()","run()","run()","run()","start()","start()","start()","text()","text()","to()","to_a()","to_s()","to_s()","to_s()","to_s()","update()","valid_format?()","valid_format?()","valid_input_format?()","valid_output_format?()","wrap()","wrap()","copying","changelog","readme"],"longSearchIndex":["athena","athena::cli","athena::formats","athena::formats::base","athena::formats::configerror","athena::formats::dbm","athena::formats::directionmismatcherror","athena::formats::duplicateformatdefinitionerror","athena::formats::ferret","athena::formats::formaterror","athena::formats::formatnotfounderror","athena::formats::illegalrecordelementerror","athena::formats::lingo","athena::formats::lingo::keyvalue","athena::formats::lingo::multikey","athena::formats::lingo::multivalue","athena::formats::lingo::singleword","athena::formats::lingo::wordclass","athena::formats::mysql","athena::formats::midos","athena::formats::mysql","athena::formats::norecordelementerror","athena::formats::pgsql","athena::formats::pgsql","athena::formats::sisis","athena::formats::xml","athena::formats::xml::basespec","athena::formats::xml::elementspec","athena::formats::xml::flat","athena::formats::xml::recordspec","athena::formats::xml::subelementspec","athena::record","athena::record::norecorderror","athena::version","nuggets","athena::formats::[]()","athena::record::[]()","athena::record#add_record()","athena#build_config()","athena::formats::xml#builder()","athena::formats::lingo#check_args()","athena::record#close()","athena::formats::base#convert()","athena::formats::dbm#convert()","athena::formats::dbm#convert()","athena::formats::lingo#convert()","athena::formats::lingo::keyvalue#convert()","athena::formats::lingo::multivalue#convert()","athena::formats::lingo::multivalue#convert()","athena::formats::lingo::singleword#convert()","athena::formats::lingo::wordclass#convert()","athena::formats::xml#convert()","athena::formats::xml::flat#convert()","athena::cli::defaults()","athena::formats::base#deferred?()","athena::formats::lingo#deferred?()","athena::formats::xml#define_spec()","athena::formats::base::directions()","athena::formats::xml::basespec#done()","athena::formats::xml::recordspec#done()","athena::formats::xml::basespec#empty()","athena::record#fill()","athena::formats::find()","athena::formats::base::format()","athena::formats::format_name()","athena::formats::base::has_direction?()","athena::formats::base::init()","athena::formats::base#init()","athena::formats::base#init_in()","athena::formats::dbm#init_in()","athena::formats::dbm#init_in()","athena::formats::mysql#init_in()","athena::formats::pgsql#init_in()","athena::formats::xml#init_in()","athena::formats::base#init_out()","athena#input_formats()","athena::formats::xml#listener()","athena::cli#merge_config()","athena::formats::xml#merge_specs()","athena::formats::directionmismatcherror::new()","athena::formats::duplicateformatdefinitionerror::new()","athena::formats::formatnotfounderror::new()","athena::formats::xml::elementspec::new()","athena::formats::xml::recordspec::new()","athena::formats::xml::subelementspec::new()","athena::record::new()","athena::cli#opts()","athena#output_formats()","athena::formats::base#parse()","athena::formats::dbm#parse()","athena::formats::dbm#parse()","athena::formats::ferret#parse()","athena::formats::mysql#parse()","athena::formats::pgsql#parse()","athena::formats::sisis#parse()","athena::formats::xml#parse()","athena::cli#print_formats()","athena::formats::base#raw?()","athena::formats::xml#raw?()","athena::record::records()","athena::formats::register()","athena::formats::register_all()","athena::formats::base::register_format()","athena#run()","athena::cli#run()","athena::formats::base#run()","athena::formats::xml::basespec#start()","athena::formats::xml::elementspec#start()","athena::formats::xml::recordspec#start()","athena::formats::xml::basespec#text()","athena::formats::xml::elementspec#text()","athena::record#to()","athena::version::to_a()","athena::formats::directionmismatcherror#to_s()","athena::formats::duplicateformatdefinitionerror#to_s()","athena::formats::formatnotfounderror#to_s()","athena::version::to_s()","athena::record#update()","athena#valid_format?()","athena::formats::valid_format?()","athena#valid_input_format?()","athena#valid_output_format?()","athena::formats::base#wrap()","athena::formats::xml#wrap()","","",""],"info":[["Athena","","Athena.html","","<p>See README.\n"],["Athena::CLI","","Athena/CLI.html","",""],["Athena::Formats","","Athena/Formats.html","","<p>In order to support additional input and/or output formats,\nAthena::Formats::Base needs to be sub-classed …\n"],["Athena::Formats::Base","","Athena/Formats/Base.html","","<p>Base class for all format classes. See Athena::Formats for more\ninformation.\n"],["Athena::Formats::ConfigError","","Athena/Formats/ConfigError.html","",""],["Athena::Formats::DBM","","Athena/Formats/DBM.html","",""],["Athena::Formats::DirectionMismatchError","","Athena/Formats/DirectionMismatchError.html","",""],["Athena::Formats::DuplicateFormatDefinitionError","","Athena/Formats/DuplicateFormatDefinitionError.html","",""],["Athena::Formats::Ferret","","Athena/Formats/Ferret.html","",""],["Athena::Formats::FormatError","","Athena/Formats/FormatError.html","",""],["Athena::Formats::FormatNotFoundError","","Athena/Formats/FormatNotFoundError.html","",""],["Athena::Formats::IllegalRecordElementError","","Athena/Formats/IllegalRecordElementError.html","",""],["Athena::Formats::Lingo","","Athena/Formats/Lingo.html","",""],["Athena::Formats::Lingo::KeyValue","","Athena/Formats/Lingo/KeyValue.html","","<p>“John Vorhauer*Vorhauer, John”\n"],["Athena::Formats::Lingo::MultiKey","","Athena/Formats/Lingo/MultiValue.html","","<p>“Fax;Faxkopie;Telefax”\n"],["Athena::Formats::Lingo::MultiValue","","Athena/Formats/Lingo/MultiValue.html","","<p>“Fax;Faxkopie;Telefax”\n"],["Athena::Formats::Lingo::SingleWord","","Athena/Formats/Lingo/SingleWord.html","","<p>“Nasenbär”\n"],["Athena::Formats::Lingo::WordClass","","Athena/Formats/Lingo/WordClass.html","","<p>“Essen,essen #v Essen #s Esse #s”\n"],["Athena::Formats::MYSQL","","Athena/Formats/MYSQL.html","",""],["Athena::Formats::Midos","","Athena/Formats/DBM.html","",""],["Athena::Formats::MySQL","","Athena/Formats/MySQL.html","",""],["Athena::Formats::NoRecordElementError","","Athena/Formats/NoRecordElementError.html","",""],["Athena::Formats::PGSQL","","Athena/Formats/PGSQL.html","",""],["Athena::Formats::PgSQL","","Athena/Formats/PgSQL.html","",""],["Athena::Formats::Sisis","","Athena/Formats/Sisis.html","",""],["Athena::Formats::XML","","Athena/Formats/XML.html","",""],["Athena::Formats::XML::BaseSpec","","Athena/Formats/XML/BaseSpec.html","",""],["Athena::Formats::XML::ElementSpec","","Athena/Formats/XML/ElementSpec.html","",""],["Athena::Formats::XML::Flat","","Athena/Formats/XML/Flat.html","",""],["Athena::Formats::XML::RecordSpec","","Athena/Formats/XML/RecordSpec.html","",""],["Athena::Formats::XML::SubElementSpec","","Athena/Formats/XML/SubElementSpec.html","",""],["Athena::Record","","Athena/Record.html","",""],["Athena::Record::NoRecordError","","Athena/Record/NoRecordError.html","",""],["Athena::Version","","Athena/Version.html","",""],["Nuggets","","Nuggets.html","",""],["[]","Athena::Formats","Athena/Formats.html#method-c-5B-5D","(direction, format, *args)","<p>Retrieves the format for <code>direction</code> by its name\n<code>format</code> (see ::find) and initializes it with <code>args</code>\n(see …\n"],["[]","Athena::Record","Athena/Record.html#method-c-5B-5D","(field = nil, config = nil)",""],["add_record","Athena::Record","Athena/Record.html#method-i-add_record","()",""],["build_config","Athena","Athena.html#method-i-build_config","(config)",""],["builder","Athena::Formats::XML","Athena/Formats/XML.html#method-i-builder","(options = {})",""],["check_args","Athena::Formats::Lingo","Athena/Formats/Lingo.html#method-i-check_args","(expected, actual, &block)",""],["close","Athena::Record","Athena/Record.html#method-i-close","()",""],["convert","Athena::Formats::Base","Athena/Formats/Base.html#method-i-convert","(record)","<p>Converts <code>record</code> (Athena::Record) according to the format\nrepresented by this class. The return value …\n"],["convert","Athena::Formats::DBM","Athena/Formats/DBM.html#method-i-convert","(record)",""],["convert","Athena::Formats::DBM","Athena/Formats/DBM.html#method-i-convert","(record)",""],["convert","Athena::Formats::Lingo","Athena/Formats/Lingo.html#method-i-convert","(record)",""],["convert","Athena::Formats::Lingo::KeyValue","Athena/Formats/Lingo/KeyValue.html#method-i-convert","(record)",""],["convert","Athena::Formats::Lingo::MultiValue","Athena/Formats/Lingo/MultiValue.html#method-i-convert","(record)",""],["convert","Athena::Formats::Lingo::MultiValue","Athena/Formats/Lingo/MultiValue.html#method-i-convert","(record)",""],["convert","Athena::Formats::Lingo::SingleWord","Athena/Formats/Lingo/SingleWord.html#method-i-convert","(record)",""],["convert","Athena::Formats::Lingo::WordClass","Athena/Formats/Lingo/WordClass.html#method-i-convert","(record)",""],["convert","Athena::Formats::XML","Athena/Formats/XML.html#method-i-convert","(record)",""],["convert","Athena::Formats::XML::Flat","Athena/Formats/XML/Flat.html#method-i-convert","(record)",""],["defaults","Athena::CLI","Athena/CLI.html#method-c-defaults","()",""],["deferred?","Athena::Formats::Base","Athena/Formats/Base.html#method-i-deferred-3F","()","<p>Indicates whether output is to be deferred and only be written after all\nrecords have been converted …\n"],["deferred?","Athena::Formats::Lingo","Athena/Formats/Lingo.html#method-i-deferred-3F","()",""],["define_spec","Athena::Formats::XML","Athena/Formats/XML.html#method-i-define_spec","(element, field, config, arg)",""],["directions","Athena::Formats::Base","Athena/Formats/Base.html#method-c-directions","()","<p>Returns an array of the directions supported by this class.\n"],["done","Athena::Formats::XML::BaseSpec","Athena/Formats/XML/BaseSpec.html#method-i-done","(context, name)",""],["done","Athena::Formats::XML::RecordSpec","Athena/Formats/XML/RecordSpec.html#method-i-done","(context, name)",""],["empty","Athena::Formats::XML::BaseSpec","Athena/Formats/XML/BaseSpec.html#method-i-empty","(context)",""],["fill","Athena::Record","Athena/Record.html#method-i-fill","(field, config)",""],["find","Athena::Formats","Athena/Formats.html#method-c-find","(direction, format, instance = false)","<p>Retrieves the format for <code>direction</code> by its name\n<code>format</code>. Returns <code>format</code>&#39;s class if it already\nis a …\n"],["format","Athena::Formats::Base","Athena/Formats/Base.html#method-c-format","()","<p>Returns this class&#39;s format name.\n"],["format_name","Athena::Formats","Athena/Formats.html#method-c-format_name","(fn)","<p>Formats <code>name</code> as suitable format name.\n"],["has_direction?","Athena::Formats::Base","Athena/Formats/Base.html#method-c-has_direction-3F","(direction)","<p>Indicates whether this class supports <code>direction</code>.\n"],["init","Athena::Formats::Base","Athena/Formats/Base.html#method-c-init","(direction, *args)","<p>Returns a new instance of this class for <code>direction</code> initialized\nwith <code>args</code> (see #init).\n"],["init","Athena::Formats::Base","Athena/Formats/Base.html#method-i-init","(direction, *args)","<p>Initializes <em>format</em> for <code>direction</code> with\n<code>args</code> (see #init_in and #init_out), while making sure that\n<code>direction</code> …\n"],["init_in","Athena::Formats::Base","Athena/Formats/Base.html#method-i-init_in","(config)","<p>Initialize <em>input</em> format (with <code>config</code>).\n"],["init_in","Athena::Formats::DBM","Athena/Formats/DBM.html#method-i-init_in","(*)",""],["init_in","Athena::Formats::DBM","Athena/Formats/DBM.html#method-i-init_in","(*)",""],["init_in","Athena::Formats::MYSQL","Athena/Formats/MYSQL.html#method-i-init_in","(*)",""],["init_in","Athena::Formats::PGSQL","Athena/Formats/PGSQL.html#method-i-init_in","(*)",""],["init_in","Athena::Formats::XML","Athena/Formats/XML.html#method-i-init_in","(*)",""],["init_out","Athena::Formats::Base","Athena/Formats/Base.html#method-i-init_out","(output = nil)","<p>Initialize <em>output</em> format (with optional <code>output</code>).\n"],["input_formats","Athena","Athena.html#method-i-input_formats","()",""],["listener","Athena::Formats::XML","Athena/Formats/XML.html#method-i-listener","(&block)",""],["merge_config","Athena::CLI","Athena/CLI.html#method-i-merge_config","(args = [defaults])",""],["merge_specs","Athena::Formats::XML","Athena/Formats/XML.html#method-i-merge_specs","(container, key, spec)",""],["new","Athena::Formats::DirectionMismatchError","Athena/Formats/DirectionMismatchError.html#method-c-new","(direction, directions)",""],["new","Athena::Formats::DuplicateFormatDefinitionError","Athena/Formats/DuplicateFormatDefinitionError.html#method-c-new","(direction, format)",""],["new","Athena::Formats::FormatNotFoundError","Athena/Formats/FormatNotFoundError.html#method-c-new","(direction, format)",""],["new","Athena::Formats::XML::ElementSpec","Athena/Formats/XML/ElementSpec.html#method-c-new","(name, field, config)",""],["new","Athena::Formats::XML::RecordSpec","Athena/Formats/XML/RecordSpec.html#method-c-new","(&block)",""],["new","Athena::Formats::XML::SubElementSpec","Athena/Formats/XML/SubElementSpec.html#method-c-new","(parent)",""],["new","Athena::Record","Athena/Record.html#method-c-new","(id = nil, block = nil, add = !block)",""],["opts","Athena::CLI","Athena/CLI.html#method-i-opts","(opts)",""],["output_formats","Athena","Athena.html#method-i-output_formats","()",""],["parse","Athena::Formats::Base","Athena/Formats/Base.html#method-i-parse","(input)","<p>Parses <code>input</code> according to the format represented by this class\nand passes each record to the block.  …\n"],["parse","Athena::Formats::DBM","Athena/Formats/DBM.html#method-i-parse","(input, &block)",""],["parse","Athena::Formats::DBM","Athena/Formats/DBM.html#method-i-parse","(input, &block)",""],["parse","Athena::Formats::Ferret","Athena/Formats/Ferret.html#method-i-parse","(input, &block)",""],["parse","Athena::Formats::MYSQL","Athena/Formats/MYSQL.html#method-i-parse","(input, &block)",""],["parse","Athena::Formats::PGSQL","Athena/Formats/PGSQL.html#method-i-parse","(input, &block)",""],["parse","Athena::Formats::Sisis","Athena/Formats/Sisis.html#method-i-parse","(input, &block)",""],["parse","Athena::Formats::XML","Athena/Formats/XML.html#method-i-parse","(input, &block)",""],["print_formats","Athena::CLI","Athena/CLI.html#method-i-print_formats","(direction)",""],["raw?","Athena::Formats::Base","Athena/Formats/Base.html#method-i-raw-3F","()","<p>Indicates whether output is written directly in #convert.\n"],["raw?","Athena::Formats::XML","Athena/Formats/XML.html#method-i-raw-3F","()",""],["records","Athena::Record","Athena/Record.html#method-c-records","()",""],["register","Athena::Formats","Athena/Formats.html#method-c-register","(klass, name = nil, relax = false)","<p>Registers <code>klass</code> as format under <code>name</code> (defaults to\nBase.format). Only warns instead of raising any errors …\n"],["register_all","Athena::Formats","Athena/Formats.html#method-c-register_all","(klass = self, registered = [])","<p>Recursively registers all formats <strong>below</strong> <code>klass</code>\n(see ::register). Returns an array of all registered format …\n"],["register_format","Athena::Formats::Base","Athena/Formats/Base.html#method-c-register_format","(name = nil, relax = false)","<p>Shortcut for <code>Athena::Formats.register(self, name, relax)</code>. Must\nbe called at the end of or after the class …\n"],["run","Athena","Athena.html#method-i-run","(config, spec, format, input, output)",""],["run","Athena::CLI","Athena/CLI.html#method-i-run","(arguments)",""],["run","Athena::Formats::Base","Athena/Formats/Base.html#method-i-run","(spec, input)","<p>Runs the <em>output</em> generation for <em>input</em> format\n<code>spec</code> (Athena::Formats::Base) on <code>input</code>. Outputs a\nsorted and …\n"],["start","Athena::Formats::XML::BaseSpec","Athena/Formats/XML/BaseSpec.html#method-i-start","(context, name, attrs)",""],["start","Athena::Formats::XML::ElementSpec","Athena/Formats/XML/ElementSpec.html#method-i-start","(context, name, attrs)",""],["start","Athena::Formats::XML::RecordSpec","Athena/Formats/XML/RecordSpec.html#method-i-start","(context, name, attrs)",""],["text","Athena::Formats::XML::BaseSpec","Athena/Formats/XML/BaseSpec.html#method-i-text","(context, data)",""],["text","Athena::Formats::XML::ElementSpec","Athena/Formats/XML/ElementSpec.html#method-i-text","(context, data)",""],["to","Athena::Record","Athena/Record.html#method-i-to","(format)",""],["to_a","Athena::Version","Athena/Version.html#method-c-to_a","()","<p>Returns array representation.\n"],["to_s","Athena::Formats::DirectionMismatchError","Athena/Formats/DirectionMismatchError.html#method-i-to_s","()",""],["to_s","Athena::Formats::DuplicateFormatDefinitionError","Athena/Formats/DuplicateFormatDefinitionError.html#method-i-to_s","()",""],["to_s","Athena::Formats::FormatNotFoundError","Athena/Formats/FormatNotFoundError.html#method-i-to_s","()",""],["to_s","Athena::Version","Athena/Version.html#method-c-to_s","()","<p>Short-cut for version string.\n"],["update","Athena::Record","Athena/Record.html#method-i-update","(element, data, field_config = nil)",""],["valid_format?","Athena","Athena.html#method-i-valid_format-3F","(direction, format)",""],["valid_format?","Athena::Formats","Athena/Formats.html#method-c-valid_format-3F","(direction, format)","<p>Indicates whether the <code>direction</code>/<code>format</code>\ncombination is supported, i.e. a format by name <code>format</code> has\nbeen …\n"],["valid_input_format?","Athena","Athena.html#method-i-valid_input_format-3F","(format)",""],["valid_output_format?","Athena","Athena.html#method-i-valid_output_format-3F","(format)",""],["wrap","Athena::Formats::Base","Athena/Formats/Base.html#method-i-wrap","()","<p>Hook for wrapping the output generation in #run.\n"],["wrap","Athena::Formats::XML","Athena/Formats/XML.html#method-i-wrap","()",""],["COPYING","","COPYING.html","","<p>License for athena\n\n<pre>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version ...</pre>\n"],["ChangeLog","","ChangeLog.html","","<p>Revision history for athena\n<p>x.y.z [yyyy-mm-dd]\n<p>…\n"],["README","","README.html","","<p>athena - Convert database files to various formats\n<p>VERSION\n<p>This documentation refers to athena version …\n"]]}}